---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: prefetch-dependencies-oci-ta
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, konflux
  labels:
    app.kubernetes.io/version: "0.1"
spec:
  description: |-
    Task that uses Cachi2 to prefetch build dependencies. The fetched dependencies and the
    application source code are stored as a trusted artifact in the provided OCI repository.
    For additional info on Cachi2, see docs at
    https://github.com/containerbuildsystem/cachi2#basic-usage.

    ## Configuration

    Config file must be passed as a YAML string. For all available config options please check
    [available configuration parameters] page.

    Example of setting timeouts:

    ```yaml
    params:
      - name: config-file-content
        value: |
          ---
          requests_timeout: 300
          subprocess_timeout: 3600
    ```

    [available configuration parameters]: https://github.com/containerbuildsystem/cachi2?tab=readme-ov-file#available-configuration-parameters
  params:
    - name: ACTIVATION_KEY
      default: activation-key
      description: Name of secret which contains subscription activation key
      type: string
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
    - name: caTrustConfigMapKey
      description: The name of the key in the ConfigMap that contains the
        CA bundle data.
      type: string
      default: ca-bundle.crt
    - name: caTrustConfigMapName
      description: The name of the ConfigMap to read CA bundle data from.
      type: string
      default: trusted-ca
    - name: config-file-content
      description: |
        Pass configuration to cachi2.
        Note this needs to be passed as a YAML-formatted config dump, not as a file path!
      default: ""
    - name: dev-package-managers
      description: |
        Enable in-development package managers. WARNING: the behavior may change at any time without notice. Use at your own risk.
      default: "false"
    - name: input
      description: Configures project packages that will have their dependencies
        prefetched.
    - name: log-level
      description: Set cachi2 log level (debug, info, warning, error)
      default: info
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: ""
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
  results:
    - name: CACHI2_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the prefetched dependencies.
      type: string
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
  volumes:
    - name: activation-key
      secret:
        optional: true
        secretName: $(params.ACTIVATION_KEY)
    - name: config
      emptyDir: {}
    - name: trusted-ca
      configMap:
        items:
          - key: $(params.caTrustConfigMapKey)
            path: ca-bundle.crt
        name: $(params.caTrustConfigMapName)
        optional: true
    - name: workdir
      emptyDir: {}
  workspaces:
    - name: git-basic-auth
      description: |
        A Workspace containing a .gitconfig and .git-credentials file or username and password.
        These will be copied to the user's home before any cachi2 commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to bind a Secret to this Workspace over other volume types.
      optional: true
    - name: netrc
      description: |
        Workspace containing a .netrc file. Cachi2 will use the credentials in this file when
        performing http(s) requests.
      optional: true
  stepTemplate:
    env:
      - name: CONFIG_FILE_CONTENT
        value: $(params.config-file-content)
    volumeMounts:
      - mountPath: /mnt/config
        name: config
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: skip-ta
      image: registry.access.redhat.com/ubi9/ubi-minimal:9.4-1194@sha256:73f7dcacb460dad137a58f24668470a5a2e47378838a0190eef0ab532c6e8998
      env:
        - name: INPUT
          value: $(params.input)
        - name: SOURCE_ARTIFACT
          value: $(params.SOURCE_ARTIFACT)
      script: |
        if [ -z "${INPUT}" ]; then
          mkdir -p /var/workdir/source
          mkdir -p /var/workdir/cachi2
          echo "true" >/var/workdir/source/.skip-trusted-artifacts
          echo "true" >/var/workdir/cachi2/.skip-trusted-artifacts
          echo -n "${SOURCE_ARTIFACT}" >$(results.SOURCE_ARTIFACT.path)
          echo -n "" >$(results.CACHI2_ARTIFACT.path)
        fi
    - name: use-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:e0e457b6af10e44ff6b90208a9e69adc863a865e1c062c4cb84bf3846037d74d
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
    - name: sanitize-cachi2-config-file-with-yq
      image: quay.io/konflux-ci/yq:latest@sha256:f758d9a25bc88cc114bfb6137fd4d649db427de5a4217e818b8466ad5bf9255c
      script: |
        if [ -n "${CONFIG_FILE_CONTENT}" ]; then
          # we need to drop 'goproxy_url' for safety reasons until cachi2 decides what the SBOM
          # impact of this configuration option will be:
          # https://github.com/containerbuildsystem/cachi2/issues/577
          yq 'del(.goproxy_url)' <<<"${CONFIG_FILE_CONTENT}"  >/mnt/config/config.yaml
        fi
    - name: prefetch-dependencies
     # image: quay.io/redhat-appstudio/cachi2:0.11.0@sha256:1051a8e55f4b6dddb5591ac103644e1d45b2367cffe50ba900418939aace0fb2
      image: quay.io/jkyros/cachi2:latest
      volumeMounts:
        - mountPath: /activation-key
          name: activation-key
        - mountPath: /mnt/trusted-ca
          name: trusted-ca
          readOnly: true
      env:
        - name: INPUT
          value: $(params.input)
        - name: DEV_PACKAGE_MANAGERS
          value: $(params.dev-package-managers)
        - name: LOG_LEVEL
          value: $(params.log-level)
        - name: WORKSPACE_GIT_AUTH_BOUND
          value: $(workspaces.git-basic-auth.bound)
        - name: WORKSPACE_GIT_AUTH_PATH
          value: $(workspaces.git-basic-auth.path)
        - name: WORKSPACE_NETRC_BOUND
          value: $(workspaces.netrc.bound)
        - name: WORKSPACE_NETRC_PATH
          value: $(workspaces.netrc.path)
      script: |
        if [ -z "${INPUT}" ]; then
          # Confirm input was provided though it's likely the whole task would be skipped if it wasn't
          echo "No prefetch will be performed because no input was provided for cachi2 fetch-deps"
          exit 0
        fi

        if [ -f /mnt/config/config.yaml ]; then
          config_flag=--config-file=/mnt/config/config.yaml
        else
          config_flag=""
        fi

        if [ "$DEV_PACKAGE_MANAGERS" = "true" ]; then
          dev_pacman_flag=--dev-package-managers
        else
          dev_pacman_flag=""
        fi

        # Copied from https://github.com/konflux-ci/build-definitions/blob/main/task/git-clone/0.1/git-clone.yaml
        if [ "${WORKSPACE_GIT_AUTH_BOUND}" = "true" ]; then
          if [ -f "${WORKSPACE_GIT_AUTH_PATH}/.git-credentials" ] && [ -f "${WORKSPACE_GIT_AUTH_PATH}/.gitconfig" ]; then
            cp "${WORKSPACE_GIT_AUTH_PATH}/.git-credentials" "${HOME}/.git-credentials"
            cp "${WORKSPACE_GIT_AUTH_PATH}/.gitconfig" "${HOME}/.gitconfig"
          # Compatibility with kubernetes.io/basic-auth secrets
          elif [ -f "${WORKSPACE_GIT_AUTH_PATH}/username" ] && [ -f "${WORKSPACE_GIT_AUTH_PATH}/password" ]; then
            HOSTNAME=$(cd "/var/workdir/source" && git remote get-url origin | awk -F/ '{print $3}')
            echo "https://$(cat ${WORKSPACE_GIT_AUTH_PATH}/username):$(cat ${WORKSPACE_GIT_AUTH_PATH}/password)@$HOSTNAME" >"${HOME}/.git-credentials"
            echo -e "[credential \"https://$HOSTNAME\"]\n  helper = store" >"${HOME}/.gitconfig"
          else
            echo "Unknown git-basic-auth workspace format"
            exit 1
          fi
          chmod 400 "${HOME}/.git-credentials"
          chmod 400 "${HOME}/.gitconfig"
        fi

        if [ "${WORKSPACE_NETRC_BOUND}" = "true" ]; then
          cp "${WORKSPACE_NETRC_PATH}/.netrc" "${HOME}/.netrc"
        fi

        ca_bundle=/mnt/trusted-ca/ca-bundle.crt
        if [ -f "$ca_bundle" ]; then
          echo "INFO: Using mounted CA bundle: $ca_bundle"
          cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
          update-ca-trust
        fi

        ACTIVATION_KEY_PATH="/activation-key"
        if [ -d "$ACTIVATION_KEY_PATH" ]; then
            echo "Detected activation key, registering with RHSM."
            # todo: make sure orgid key is consistent with buildah task and docs
            subscription-manager register \
              --org $(cat "/activation-key/orgid") \
              --activationkey $(cat "/activation-key/activationkey")
            # detect entitlement certs and setup environment variables
            ls /etc/pki/entitlement/
            export RHSM_ID=$(ls /etc/pki/entitlement/ | grep key | cut -d - -f 1)
            echo $RHSM_ID
            export C2_CLIENT_CERT="/etc/pki/entitlement/$RHSM_ID.pem"
            export C2_CLIENT_KEY="/etc/pki/entitlement/$RHSM_ID-key.pem"
            echo "Using client certificate $C2_CLIENT_CERT and key $C2_CLIENT_KEY."
            mkdir -p /certificates/
            # TODO(jkyros): The new code looks like it doesn't work like the old code, so this is
            # coax what we had into the new plumbing that allows these options in this place.
            # Pipeline consumer will need to specify certs for input options.
            cp $C2_CLIENT_CERT /certificates/client.crt
            cp $C2_CLIENT_KEY  /certificates/client.key
            cp /etc/rhsm/ca/redhat-uep.pem /certificates/CA.crt
        fi

        cachi2 --log-level="$LOG_LEVEL" $config_flag fetch-deps \
          $dev_pacman_flag \
          --source=/var/workdir/source \
          --output=/var/workdir/cachi2/output \
          "${INPUT}"

        cachi2 --log-level="$LOG_LEVEL" generate-env /var/workdir/cachi2/output \
          --format env \
          --for-output-dir=/cachi2/output \
          --output /var/workdir/cachi2/cachi2.env

        cachi2 --log-level="$LOG_LEVEL" inject-files /var/workdir/cachi2/output \
          --for-output-dir=/cachi2/output

        # TODO(jkyros): I think we need to unregister too so we don't keep farming registrations in the database
        if [ -d "$ACTIVATION_KEY_PATH" ]; then
           echo "Unregistering from RHSM so we don't make a mess"
           subscription-manager unregister
        fi

    - name: create-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:e0e457b6af10e44ff6b90208a9e69adc863a865e1c062c4cb84bf3846037d74d
      args:
        - create
        - --store
        - $(params.ociStorage)
        - $(results.SOURCE_ARTIFACT.path)=/var/workdir/source
        - $(results.CACHI2_ARTIFACT.path)=/var/workdir/cachi2
      env:
        - name: IMAGE_EXPIRES_AFTER
          value: $(params.ociArtifactExpiresAfter)
